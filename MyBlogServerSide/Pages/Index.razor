@page "/"

@using MyBlog.Data.Interfaces
@using MyBlog.Data.Models
@using MyBlog.Data.Seeder
@using MyBlogServerSide.Components
@inject IMyBlogApi api

@code{

    protected ElementReference addAlert;
    
    private Virtualize<BlogPost> BlogPostContainer { get; set; }
    
    private int numOfPosts { get; set; }

    protected string AlertMessage = "";
 
    protected async Task AddSomePosts()
    {
        int r = new Random().Next(1, 10);
        
        for (var i = 0; i < r; i++)
        {
            await api.SaveBlogPostAsync(BlogPostFactory.Create());
        }

        AlertMessage = $@"{r} posts created!";

        await SetBlogPostCount();
        await BlogPostContainer.RefreshDataAsync();
        
        await addAlert.FocusAsync();
    }

    protected void ClickClear()
    {
        AlertMessage = String.Empty;
    }

    private async Task SetBlogPostCount()
    {
        if (numOfPosts == 0)
        {
            numOfPosts = await api.GetBlogPostCountAsync();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await SetBlogPostCount();
        await base.OnInitializedAsync();
    }
    
    private async ValueTask<ItemsProviderResult<BlogPost>> LoadPosts(ItemsProviderRequest request)
    {
        var num = Math.Min(request.Count, numOfPosts - request.StartIndex);
        var posts = await api.GetBlogPostsAsync(num, request.StartIndex);
        return new ItemsProviderResult<BlogPost>(posts, numOfPosts);
    }

}

<PageTitle>Index</PageTitle>


<div>
    <p>Num of Posts: @numOfPosts</p>
</div>
<div>
    <div>
        <button class="btn btn-danger" @onclick="AddSomePosts">Add some fake posts</button>
    </div>
    
    <br/>

    <div @ref="addAlert">
    @if (!string.IsNullOrEmpty(AlertMessage))
    {
        <Alert Style="Alert.AlertStyle.Success">
            <ChildContent>
                <div>
                    <p>@AlertMessage</p>
                    <button class="btn btn-dark" @onclick="() => ClickClear()">X</button>
                </div>
               
            </ChildContent>
        </Alert>
    }
    </div>

</div>
<br />

<div>
    <Virtualize @ref="BlogPostContainer" ItemsProvider="LoadPosts" Context="p" >
        <div class="card" >
            <div class="card-body">
                <h5 class="card-title">
                    <a href="/Post/@p.Id">
                        <b>#@p.Id</b> | <i>@p.Title</i>
                    </a>
                </h5>
                <p class="card-text">@p.Text</p>
            </div>
        </div>
        <br />
        <hr />
        <br />
    </Virtualize>
</div>

