@page "/admin/categories"
@using MyBlogServerSide.Components
@using MyBlog.Data.Interfaces
@using MyBlog.Data.Models
@inject IMyBlogApi api

<div class="container">
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <EditForm Model="Item" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
                <div class="form-group">
                    <label>Name:</label>
                    <InputText @bind-Value="@Item.Name"/>
                </div>
                <div class="form-group">
                    <ValidationMessage  For="() => Item.Name"/>
                </div>
                <div class="form-group">
                    <button class="btn btn-success" type="submit" >Save</button>
                </div>
            </EditForm>
            <hr />
        </div>
    </div>
     <div class="row">
            <div class="col-lg-6 col-md-8 col-sm-12">
                <ItemList Items="Items" Context="context" DeleteEvent="Delete" SelectEvent="Select" ItemType="Category">
                    <ItemTemplate>
                        <div class="category-list-name">
                            <strong>
                            @{
                                var item = context as Category;
                                if (item != null)
                                {
                                    @item.Name
                                    ;
                                }
                            }
                            </strong>
                        </div>
                    </ItemTemplate>
                </ItemList>
            </div>
        </div>
</div>




@code {

    private List<Category> Items { get; set; } = new List<Category>();

    public Category Item { get; set; } = new Category();

    protected override async Task OnInitializedAsync()
    {
        Items = await api.GetCategoriesAsync();
        await base.OnInitializedAsync();
    }
    
    private async Task Save()
    {
        try
        {
            if (Item.Id == 0)
            {
                Items.Add(Item);
            }

            await api.SaveCategoryAsync(Item);
            Item = new Category();
        }
        catch
        {
            
        }
    }

    private async Task Delete(Category category)        
    {
        try
        {
            await api.DeleteCategoryAsync(category);
            Items.Remove(category);
        }
        catch
        {
            
        }
        
    }

    private Task Select(Category category)    
    {
        try
        {
            Item = category;
        } catch {}
        return Task.CompletedTask;
    }
    
}