@page "/admin/tags"
@using MyBlogServerSide.Components
@using MyBlog.Data.Interfaces
@using MyBlog.Data.Models
@inject IMyBlogApi api

<div class="container">
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <h2>Tags</h2>
        </div>
    </div>    
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <EditForm Model="Item" OnValidSubmit="Save">
                <DataAnnotationsValidator/>
                <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
                <div class="form-group">
                    <label>Name:</label>
                    <InputText @bind-Value="@Item.Name"/>
                </div>
                <div class="form-group">
                    <ValidationMessage For="() => Item.Name"/>
                </div>
                <div class="form-group">
                    <button class="btn btn-success" type="submit">Save</button>
                </div>
            </EditForm>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <ItemList Items="Items" Context="context" DeleteEvent="Delete" SelectEvent="Select" ItemType="Tag">
                <ItemTemplate>
                    <div>
                        <strong>
                            @{
                                var item = context as Tag;
                                if (item != null)
                                {
                                    @item.Name
                                    ;
                                }
                            }
                        </strong>
                    </div>
                </ItemTemplate>
            </ItemList>
        </div>
    </div>
</div>




@code {

    private List<Tag> Items { get; set; } = new List<Tag>();

    public Tag Item { get; set; } = new Tag();

    protected override async Task OnInitializedAsync()
    {
        Items = await api.GetTagsAsync();
        await base.OnInitializedAsync();
    }
    
    private async Task Save()
    {
        try
        {
            if (Item.Id == 0)
            {
                Items.Add(Item);
            }

            await api.SaveTagAsync(Item);
            Item = new Tag();
        }
        catch
        {
            
        }
    }

    private async Task Delete(Tag tag)        
    {
        try
        {
            await api.DeleteTagAsync(tag);
            Items.Remove(tag);
        }
        catch
        {
            
        }
        
    }

    private Task Select(Tag tag)    
    {
        try
        {
            Item = tag;
        } catch {}
        return Task.CompletedTask;
    }
    

}